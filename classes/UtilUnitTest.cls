/*
* This utility class creates objects and sets the required fields on them. This is done by scanning �objects� folder
* The appropriate static methods of this Utility Class will be called in Test Classes generated by Unit test  whenever the test class has to create objects
* 
*/
 @isTest
 public class UtilUnitTest { 
/*
* @Method This method getUser is used to get a User
* @param Method is not having any parameters
* @return User - Method returning instance of User
* @throws exception - Method is not throwing any exception
*/ 
 public static User getUser(){ 
    String aliasString = 'test';
    Id sysAdminId = [Select Id from Profile Where Name = 'System Administrator' Limit 1].Id;
    User usr = new User(
    alias = aliasString, 
    email= aliasString+'@accenture.com',
    emailencodingkey='UTF-8',
    lastname='Testing', 
    languagelocalekey='en_US',
    localesidkey='en_US',
    profileid = sysAdminId,
    timezonesidkey='Europe/London',
    username= aliasString+'@accenture.com');
    return usr;
 }
 
 public static void loadAllStaticData(){

List<Sobject> l2 = Test.loadData( Org_Constant_CS__c.SobjectType, 'TestOrgConstantCS' );
// System.assertEquals(47, l2.size());
List<Sobject> l3 = Test.loadData( SCP_Communities_ActivitStreamUrl__c.SobjectType, 'csTestDataSCPActivitStreamUrl' );
System.assertEquals(1, l3.size());
List<Sobject> l4 = Test.loadData( SCP_Communities_adminprofiles__c.SobjectType, 'SCPCommadminprofiles' );
List<Sobject> l5 = Test.loadData( SCP_Communities_languageMap__c.SobjectType, 'SCPCommunitieslanguageMap' );
List<Sobject> l7 = Test.loadData( ProfileID__c.SobjectType, 'SCPProfileIDData' ); 
List<Sobject> l8 = Test.loadData( ObjectRecordTypeIds__c.SobjectType, 'SCPObjectRecTId' );
List<Sobject> l6 = Test.loadData( SCP_Communities_Listviews__c.SobjectType, 'SCPCommunitieslistview' );

 }
 
 
 public static User getPAUser(){
    
     String aliasString = 'test';
    Id paUser = [Select Id from Profile Where Name = 'POC - Partner Community' Limit 1].Id;
    User usr = new User(
    alias = aliasString, 
    email= aliasString+'@accenture.com',
    emailencodingkey='UTF-8',
    lastname='Testing', 
    languagelocalekey='en_US',
    localesidkey='en_US',
    profileid = paUser,
    timezonesidkey='Europe/London',
    username= aliasString+'@accenture.com');
    return usr;
    
 }

/*
* @Method This method  getAccount is used to get a  Account
* @param Method is not having any parameters
* @return Account - Method returning instance of  Account
* @throws exception - Method is not throwing any exception
*/  
 public static Account getAccount() {
    Account accountSample=new Account();
    accountSample.Name='Test Account';

    return accountSample;
  }

/*
* @Method This method  getAssigned_Partner__c is used to get a  Assigned_Partner__c
* @param Method is not having any parameters
* @return Assigned_Partner__c - Method returning instance of  Assigned_Partner__c
* @throws exception - Method is not throwing any exception
*/  
 public static Assigned_Partner__c getAssigned_Partner_c() {
    Assigned_Partner__c assigned_partnerSample=new Assigned_Partner__c();
    assigned_partnerSample.Name='Test Assigned_Partner__c';
    assigned_partnerSample.Expiration_Date__c = date.newInstance(2014, 01, 01);

    return assigned_partnerSample;
  }

/*
* @Method This method  getCCW_Urls__c is used to get a  CCW_Urls__c
* @param Method is not having any parameters
* @return CCW_Urls__c - Method returning instance of  CCW_Urls__c
* @throws exception - Method is not throwing any exception
*/  
 public static CCW_Urls__c getCCW_Urls_c() {
    CCW_Urls__c ccw_urlsSample=new CCW_Urls__c();
    ccw_urlsSample.Name='Test CCW_Urls__c';

    return ccw_urlsSample;
  }

/*
* @Method This method  getLead is used to get a  Lead
* @param Method is not having any parameters
* @return Lead - Method returning instance of  Lead
* @throws exception - Method is not throwing any exception
*/  
 public static Lead getLead() {
    Lead leadSample=new Lead();
    leadSample.LastName='Test LastName';
    leadSample.Company = 'Accenture';

    return leadSample;
  }

/*
* @Method This method  getP360_urls__c is used to get a  P360_urls__c
* @param Method is not having any parameters
* @return P360_urls__c - Method returning instance of  P360_urls__c
* @throws exception - Method is not throwing any exception
*/  
 public static P360_urls__c getP360_urls_c() {
    P360_urls__c p360_urlsSample=new P360_urls__c();
    p360_urlsSample.Name='Test P360_urls__c';

    return p360_urlsSample;
  }

/*
* @Method This method  getSCP_Communities_ActivitStreamUrl__c is used to get a  SCP_Communities_ActivitStreamUrl__c
* @param Method is not having any parameters
* @return SCP_Communities_ActivitStreamUrl__c - Method returning instance of  SCP_Communities_ActivitStreamUrl__c
* @throws exception - Method is not throwing any exception
*/  
 public static SCP_Communities_ActivitStreamUrl__c getSCP_Communities_ActivitStreamUrl_c() {
    SCP_Communities_ActivitStreamUrl__c scp_communities_activitstreamurlSample=new SCP_Communities_ActivitStreamUrl__c();
    scp_communities_activitstreamurlSample.Name='Test SCP_Communities_ActivitStreamUrl__c';

    return scp_communities_activitstreamurlSample;
  }

/*
* @Method This method  getSCP_Communities_adminprofiles__c is used to get a  SCP_Communities_adminprofiles__c
* @param Method is not having any parameters
* @return SCP_Communities_adminprofiles__c - Method returning instance of  SCP_Communities_adminprofiles__c
* @throws exception - Method is not throwing any exception
*/  
 public static SCP_Communities_adminprofiles__c getSCP_Communities_adminprofiles_c() {
    SCP_Communities_adminprofiles__c scp_communities_adminprofilesSample=new SCP_Communities_adminprofiles__c();
    scp_communities_adminprofilesSample.Name='Test SCP_Communities_adminprofiles__c';

    scp_communities_adminprofilesSample.Profile_ID__c='Test SCP_Communities_adminprofiles__c';
    return scp_communities_adminprofilesSample;
  }

/*
* @Method This method  getSCP_Communities_DTO__c is used to get a  SCP_Communities_DTO__c
* @param Method is not having any parameters
* @return SCP_Communities_DTO__c - Method returning instance of  SCP_Communities_DTO__c
* @throws exception - Method is not throwing any exception
*/  
 public static SCP_Communities_DTO__c getSCP_Communities_DTO_c() {
    SCP_Communities_DTO__c scp_communities_dtoSample=new SCP_Communities_DTO__c();
    scp_communities_dtoSample.Name='Test SCP_Communities_DTO__c';

    return scp_communities_dtoSample;
  }

/*
* @Method This method  getSCP_Communities_headerlinks__c is used to get a  SCP_Communities_headerlinks__c
* @param Method is not having any parameters
* @return SCP_Communities_headerlinks__c - Method returning instance of  SCP_Communities_headerlinks__c
* @throws exception - Method is not throwing any exception
*/  
 public static SCP_Communities_headerlinks__c getSCP_Communities_headerlinks_c() {
    SCP_Communities_headerlinks__c scp_communities_headerlinksSample=new SCP_Communities_headerlinks__c();
    scp_communities_headerlinksSample.Name='Test SCP_Communities_headerlinks__c';

    return scp_communities_headerlinksSample;
  }

/*
* @Method This method  getSCP_Communities_languageMap__c is used to get a  SCP_Communities_languageMap__c
* @param Method is not having any parameters
* @return SCP_Communities_languageMap__c - Method returning instance of  SCP_Communities_languageMap__c
* @throws exception - Method is not throwing any exception
*/  
 public static SCP_Communities_languageMap__c getSCP_Communities_languageMap_c() {
    SCP_Communities_languageMap__c scp_communities_languagemapSample=new SCP_Communities_languageMap__c();
    scp_communities_languagemapSample.Name='Test SCP_Communities_languageMap__c';

    return scp_communities_languagemapSample;
  }

/*
* @Method This method  getSCP_Communities_listviews__c is used to get a  SCP_Communities_listviews__c
* @param Method is not having any parameters
* @return SCP_Communities_listviews__c - Method returning instance of  SCP_Communities_listviews__c
* @throws exception - Method is not throwing any exception
*/  
 public static SCP_Communities_listviews__c getSCP_Communities_listviews_c() {
    SCP_Communities_listviews__c scp_communities_listviewsSample=new SCP_Communities_listviews__c();
    scp_communities_listviewsSample.Name='Test SCP_Communities_listviews__c';

    return scp_communities_listviewsSample;
  }

/*
* @Method This method  getSCP_Communities_permSets__c is used to get a  SCP_Communities_permSets__c
* @param Method is not having any parameters
* @return SCP_Communities_permSets__c - Method returning instance of  SCP_Communities_permSets__c
* @throws exception - Method is not throwing any exception
*/  
 public static SCP_Communities_permSets__c getSCP_Communities_permSets_c() {
    SCP_Communities_permSets__c scp_communities_permsetsSample=new SCP_Communities_permSets__c();
    scp_communities_permsetsSample.Name='Test SCP_Communities_permSets__c';

    return scp_communities_permsetsSample;
  }

public static Prospect_Extension__c getProspect_Extension() {
    Prospect_Extension__c prospect_extension =new Prospect_Extension__c();
 //   prospect_extension.CreatedDate = date.newInstance(2015, 01, 01);
    prospect_extension.Extension_Reason__c = 'Explicit Extension by Partner';
    return prospect_extension;
  }

/*
* @Methd : This method used to set SCP_triggerFlage__c custom settings data for Leads
* @param : Not having any param
* @returns : void
* @throws : Method is not throwing any exception
*/
public static void setSCPtriggerFlagLead() {
    SCP_triggerFlag__c newRec= SCP_triggerFlag__c.getOrgDefaults();
    if(newRec == null) {
        newRec = new SCP_triggerFlag__c();
        newRec.Lead__c = true;
        insert newRec;
        return;
    }
    newRec.Lead__c = true;
    upsert newRec;
    
}

public static void setSCPtriggerFlagTP() {
    SCP_triggerFlag__c newRec= SCP_triggerFlag__c.getOrgDefaults();
    if(newRec == null) {
        newRec = new SCP_triggerFlag__c();
        newRec.Assigned_Partner__c = true;
        insert newRec;
        return;
    }
    newRec.Assigned_Partner__c = true;
    upsert newRec;
}
 }